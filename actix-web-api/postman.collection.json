{
	"info": {
		"_postman_id": "22060f1a-1708-416a-afb7-5c3465167e2a",
		"name": "Actix web api test collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1459371"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "create_user",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"harr00y\",\n  \"password\": \"hashed_password_here\",\n  \"email\": \"elijahobara357@gmail.com\",\n  \"security_level\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/auth/create_user",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"auth",
								"create_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"harry\",\n  \"password\": \"hashed_password_here\",\n  \"email\": \"elijahobara357@gmail.com\",\n  \"security_level\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "blog",
			"item": [
				{
					"name": "create blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax and added closing parenthesis for response code test",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"Created and edited dates are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    console.log(responseData);",
									"    // pm.expect(responseData.created).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z?$/);",
									"    // pm.expect(responseData.edited).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z?$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"NEW BLOG\",\n        \"slug\": \"new-blog\",\n        \"category\": \"new blog category\",\n        \"content\": \"new blog content\",\n        \"image_link\": \"https://google.com\",\n        \"thumbnail_link\": \"https://google.com\",\n        \"featured\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:4242/api/v1/blog",
							"host": [
								"localhost"
							],
							"port": "4242",
							"path": [
								"api",
								"v1",
								"blog"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all blogs or get blog by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4242/api/v1/blog?id=1",
							"host": [
								"localhost"
							],
							"port": "4242",
							"path": [
								"api",
								"v1",
								"blog"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update blog",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"id\": 4,\n        \"title\": \"updated title\",\n        \"slug\": \"updated-title\",\n        \"category\": \"updated category\",\n        \"content\": \"was updated\",\n        \"thumbnail_link\": \"https://google.com\",\n        \"featured\": true,\n        \"publish_date\": \"2023-08-04T12:34:56\",\n        \"image_link\": \"google.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:4242/api/v1/blog",
							"host": [
								"localhost"
							],
							"port": "4242",
							"path": [
								"api",
								"v1",
								"blog"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete blog",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": 4}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:4242/api/v1/blog",
							"host": [
								"localhost"
							],
							"port": "4242",
							"path": [
								"api",
								"v1",
								"blog"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tag",
			"item": [
				{
					"name": "get all tags or by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/v1/tag",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"tag"
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create tag",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"tag test\",\n    \"assoc_table\": \"Blog\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/v1/tag",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"tag"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}